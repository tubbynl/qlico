{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Qlico documentation \u00b6 Qlico is an open-source project that makes it easier to run your (web) project inside Docker, at the moment it\u2019s just a set of configuration files. It aims to accelerate development teams by using Docker in their development workflow by using a hassle free Docker stack. Why should I use Qlico instead of X? \u00b6 Easy configuration, just pick the parts you'll need Easy to use your own configuration files Easy to extend Close to the default docker-compose experience but everything is tested When using qlico in a team, you can use defaults in your project configurations, for example postgres13 for PostgreSQL 13, percona8 for Percona 8, etc. Prerequisites \u00b6 Docker >= 20.10 docker-compose >= 1.28 dnsmasq (optional, but recommended) Getting started \u00b6 To start using Qlico please use the Quick start . History \u00b6 Qlico started as a \"side\" project in 2017, at Webstores we were using multiple Dockerfiles (for PHP 5, PHP 7, etc.), and mounting all the projects inside one webserver (Apache) . This was really slow (on macOS), and it was not possible to change the PHP version per project, all the projects were using php5, php7 or something else depending on the url. This has helped us to adopt Docker in our development workflow, but after a while the old stack was not maintainable anymore, that's when Tom decided to create a new stack with a smaller footprint, and easier to update. Qlico was born. The name Qlico? \u00b6 In the Netherlands there are plastic trash cans, called Kliko's. Because these are \"containers\", and we're using a lot of containers inside of Docker/Kubernetes, the name Qlico was used. Since naming things is hard ;-). There are only two hard things in Computer Science: cache invalidation and naming things. -- Phil Karlton Picture of Kliko's Qlico in production? \u00b6 Qlico is a \"development\" stack, but with a little bit of tweaking you are able to use the Dockerfiles inside your project, and use the prod stage. At Webstores we're using these Dockerfiles in production (on Kubernetes) without any problems! Contributing \u00b6 Qlico is open-source, you are more than welcome to contribute to this project! Fork and make a Pull Request, or create an Issue if you see any problem (even typos or spelling mistakes and grammer improvements are welcome). Stargazers \u00b6 If you like using Qlico, please star the Qlico GitHub project .","title":"Home"},{"location":"#welcome-to-the-qlico-documentation","text":"Qlico is an open-source project that makes it easier to run your (web) project inside Docker, at the moment it\u2019s just a set of configuration files. It aims to accelerate development teams by using Docker in their development workflow by using a hassle free Docker stack.","title":"Welcome to the Qlico documentation"},{"location":"#why-should-i-use-qlico-instead-of-x","text":"Easy configuration, just pick the parts you'll need Easy to use your own configuration files Easy to extend Close to the default docker-compose experience but everything is tested When using qlico in a team, you can use defaults in your project configurations, for example postgres13 for PostgreSQL 13, percona8 for Percona 8, etc.","title":"Why should I use Qlico instead of X?"},{"location":"#prerequisites","text":"Docker >= 20.10 docker-compose >= 1.28 dnsmasq (optional, but recommended)","title":"Prerequisites"},{"location":"#getting-started","text":"To start using Qlico please use the Quick start .","title":"Getting started"},{"location":"#history","text":"Qlico started as a \"side\" project in 2017, at Webstores we were using multiple Dockerfiles (for PHP 5, PHP 7, etc.), and mounting all the projects inside one webserver (Apache) . This was really slow (on macOS), and it was not possible to change the PHP version per project, all the projects were using php5, php7 or something else depending on the url. This has helped us to adopt Docker in our development workflow, but after a while the old stack was not maintainable anymore, that's when Tom decided to create a new stack with a smaller footprint, and easier to update. Qlico was born.","title":"History"},{"location":"#the-name-qlico","text":"In the Netherlands there are plastic trash cans, called Kliko's. Because these are \"containers\", and we're using a lot of containers inside of Docker/Kubernetes, the name Qlico was used. Since naming things is hard ;-). There are only two hard things in Computer Science: cache invalidation and naming things. -- Phil Karlton Picture of Kliko's","title":"The name Qlico?"},{"location":"#qlico-in-production","text":"Qlico is a \"development\" stack, but with a little bit of tweaking you are able to use the Dockerfiles inside your project, and use the prod stage. At Webstores we're using these Dockerfiles in production (on Kubernetes) without any problems!","title":"Qlico in production?"},{"location":"#contributing","text":"Qlico is open-source, you are more than welcome to contribute to this project! Fork and make a Pull Request, or create an Issue if you see any problem (even typos or spelling mistakes and grammer improvements are welcome).","title":"Contributing"},{"location":"#stargazers","text":"If you like using Qlico, please star the Qlico GitHub project .","title":"Stargazers"},{"location":"dnsmasq/","text":"dnsmasq \u00b6 dnsmasq provides a DNS server, a DHCP server with support for DHCPv6 and PXE, and a TFTP server. It is designed to be lightweight and have a small footprint, suitable for resource constrained routers and firewalls. dnsmasq can also be configured to cache DNS queries for improved DNS lookup speeds to previously visited sites. We will be only using the DNS server, to resolve *.qlico to your docker bridge network. Linux \u00b6 At the moment the Linux installation has been tested with >= Ubuntu 18.04. First open the /etc/NetworkManager/NetworkManager.conf file with your favourite text editor, make sure you'll have sudo rights. Under [main] add: dns=dnsmasq . Now we need to tell our Operating System to use the resolv.conf created by NetworkManager, we'll move the old resolv.conf to resolv.conf.old and create a symlink to the one created by NetworkManager. sudo mv /etc/resolv.conf /etc/resolv.conf.old sudo ln -s /var/run/NetworkManager/resolv.conf /etc/resolv.conf Now we'll need the IP address of your Docker bridge network, we will use this IP address in the next step. ip addr show docker0 | grep \"inet\\b\" | awk '{print $2}' | cut -d/ -f1 Now it's time to create a new dnsmasq configuration: Use the IP address, you've received from the previous step (for example: 172.17.0.1 ), and place it in this line: address=/qlico/172.17.0.1 Open the file: /etc/NetworkManager/dnsmasq.d/qlico with your favourite text editor, make sure you'll have sudo rights. And add the following to the file, make sure you'll replace the IP address with the IP address from the previous step (if it's different). domain-needed bogus-priv strict-order address=/qlico/172.17.0.1 listen-address=::1,127.0.0.1 Finally, reload NetworkManager sudo systemctl reload NetworkManager.service macOS \u00b6 To use dnsmasq on macOS we need to install it first, make sure you have homebrew installed. After that open your favourite Terminal, and run the following commands. brew install dnsmasq Get the IP address of Docker for Mac. docker run --rm -it alpine:latest nslookup host.docker.internal Use the IP adress from: Non-authoritative answer: Name: host.docker.internal Address: 192.168.64.1 # Create a configuration folder mkdir -pv $( brew --prefix ) /etc/ # Create a dnsmasq configuration file vim $( brew --prefix ) /etc/dnsmasq.conf Paste the following inside the file (remember to change the IP address when it's different): address=/qlico/192.168.64.1 listen-address=127.0.0.1 port=35353 Finish with by running the following commands # Always start dnsmasq when starting macOS. sudo brew services start dnsmasq # Create a dns resolver directory sudo mkdir -v /etc/resolver # Tell the resolver to use the local installed dnsmasq for the qlico tld. sudo bash -c 'echo \"nameserver 127.0.0.1 port 35353\" > /etc/resolver/qlico' M1 chip \u00b6 When using a MacBook with a M1 processor a workaround is required in order to be able to access docker containers from your local environment. # Create a network alias to the localloopback ip # (this is required after every reboot) sudo ifconfig lo0 alias 10 .254.254.254 255 .255.255.0 # Edit the dnsmasq configuration file sudo vim $( brew --prefix ) /etc/dnsmasq.conf Replace the ip address you entered during the macOS setup above with the alias you created in the previous step. address=/qlico/10.254.254.254 Restart dnsmasq brew services stop dnsmasq brew services start dnsmasq Windows \u00b6 Unfortunately dnsmasq is not available for Windows, if you have alternatives please contribute to the documentation.","title":"dnsmasq"},{"location":"dnsmasq/#dnsmasq","text":"dnsmasq provides a DNS server, a DHCP server with support for DHCPv6 and PXE, and a TFTP server. It is designed to be lightweight and have a small footprint, suitable for resource constrained routers and firewalls. dnsmasq can also be configured to cache DNS queries for improved DNS lookup speeds to previously visited sites. We will be only using the DNS server, to resolve *.qlico to your docker bridge network.","title":"dnsmasq"},{"location":"dnsmasq/#linux","text":"At the moment the Linux installation has been tested with >= Ubuntu 18.04. First open the /etc/NetworkManager/NetworkManager.conf file with your favourite text editor, make sure you'll have sudo rights. Under [main] add: dns=dnsmasq . Now we need to tell our Operating System to use the resolv.conf created by NetworkManager, we'll move the old resolv.conf to resolv.conf.old and create a symlink to the one created by NetworkManager. sudo mv /etc/resolv.conf /etc/resolv.conf.old sudo ln -s /var/run/NetworkManager/resolv.conf /etc/resolv.conf Now we'll need the IP address of your Docker bridge network, we will use this IP address in the next step. ip addr show docker0 | grep \"inet\\b\" | awk '{print $2}' | cut -d/ -f1 Now it's time to create a new dnsmasq configuration: Use the IP address, you've received from the previous step (for example: 172.17.0.1 ), and place it in this line: address=/qlico/172.17.0.1 Open the file: /etc/NetworkManager/dnsmasq.d/qlico with your favourite text editor, make sure you'll have sudo rights. And add the following to the file, make sure you'll replace the IP address with the IP address from the previous step (if it's different). domain-needed bogus-priv strict-order address=/qlico/172.17.0.1 listen-address=::1,127.0.0.1 Finally, reload NetworkManager sudo systemctl reload NetworkManager.service","title":"Linux"},{"location":"dnsmasq/#macos","text":"To use dnsmasq on macOS we need to install it first, make sure you have homebrew installed. After that open your favourite Terminal, and run the following commands. brew install dnsmasq Get the IP address of Docker for Mac. docker run --rm -it alpine:latest nslookup host.docker.internal Use the IP adress from: Non-authoritative answer: Name: host.docker.internal Address: 192.168.64.1 # Create a configuration folder mkdir -pv $( brew --prefix ) /etc/ # Create a dnsmasq configuration file vim $( brew --prefix ) /etc/dnsmasq.conf Paste the following inside the file (remember to change the IP address when it's different): address=/qlico/192.168.64.1 listen-address=127.0.0.1 port=35353 Finish with by running the following commands # Always start dnsmasq when starting macOS. sudo brew services start dnsmasq # Create a dns resolver directory sudo mkdir -v /etc/resolver # Tell the resolver to use the local installed dnsmasq for the qlico tld. sudo bash -c 'echo \"nameserver 127.0.0.1 port 35353\" > /etc/resolver/qlico'","title":"macOS"},{"location":"dnsmasq/#m1-chip","text":"When using a MacBook with a M1 processor a workaround is required in order to be able to access docker containers from your local environment. # Create a network alias to the localloopback ip # (this is required after every reboot) sudo ifconfig lo0 alias 10 .254.254.254 255 .255.255.0 # Edit the dnsmasq configuration file sudo vim $( brew --prefix ) /etc/dnsmasq.conf Replace the ip address you entered during the macOS setup above with the alias you created in the previous step. address=/qlico/10.254.254.254 Restart dnsmasq brew services stop dnsmasq brew services start dnsmasq","title":"M1 chip"},{"location":"dnsmasq/#windows","text":"Unfortunately dnsmasq is not available for Windows, if you have alternatives please contribute to the documentation.","title":"Windows"},{"location":"quick-start/","text":"Quick start \u00b6 Cloning the repo \u00b6 Clone the Qlico repository as qlico-core , after cloning enter the qlico-core folder, copy docker-compose.yaml and .env.dist from the dist folder to the mainroot of qlico-core . (you can also run the following commands on your favourite terminal) git clone https://github.com/qlico/qlico.git qlico-core cd qlico-core cp dist/.env.dist .env cp dist/docker-compose.yaml docker-compose.yaml By default, Qlico only comes with a reverse proxy (Traefik), if you would like more services use the Examples, for example Redis see the Examples/Redis . If you're missing a service, feel free to contribute! After customizing to your needs, you can do a docker-compose up inside the qlico-core folder. Congratulations, you're now running qlico-core . Adding Qlico to your (existing) project(s) \u00b6 To start using Qlico, you'll need a qlico folder and Dockerfile inside your (existing) project. You can find these files in the project-examples directory . dnsmasq \u00b6 For the best Qlico experience please install dnsmasq , it's not mandatory, you can also use a /etc/hosts file.","title":"Quick start"},{"location":"quick-start/#quick-start","text":"","title":"Quick start"},{"location":"quick-start/#cloning-the-repo","text":"Clone the Qlico repository as qlico-core , after cloning enter the qlico-core folder, copy docker-compose.yaml and .env.dist from the dist folder to the mainroot of qlico-core . (you can also run the following commands on your favourite terminal) git clone https://github.com/qlico/qlico.git qlico-core cd qlico-core cp dist/.env.dist .env cp dist/docker-compose.yaml docker-compose.yaml By default, Qlico only comes with a reverse proxy (Traefik), if you would like more services use the Examples, for example Redis see the Examples/Redis . If you're missing a service, feel free to contribute! After customizing to your needs, you can do a docker-compose up inside the qlico-core folder. Congratulations, you're now running qlico-core .","title":"Cloning the repo"},{"location":"quick-start/#adding-qlico-to-your-existing-projects","text":"To start using Qlico, you'll need a qlico folder and Dockerfile inside your (existing) project. You can find these files in the project-examples directory .","title":"Adding Qlico to your (existing) project(s)"},{"location":"quick-start/#dnsmasq","text":"For the best Qlico experience please install dnsmasq , it's not mandatory, you can also use a /etc/hosts file.","title":"dnsmasq"},{"location":"examples/adminer/","text":"Adminer configuration example \u00b6 About Adminer \u00b6 Adminer (formerly phpMinAdmin) is a full-featured database management tool written in PHP. Conversely to phpMyAdmin, it consist of a single file ready to deploy to the target server. Adminer is available for MySQL, MariaDB, PostgreSQL, SQLite, MS SQL, Oracle, Elasticsearch, MongoDB and others via plugin. More information about Adminer \u00b6 Adminer website Adminer on Docker Hub How to add Adminer to Qlico? \u00b6 Add the following YAML to the services section of your docker-compose.yaml file. adminer : image : adminer:4.8.1-standalone container_name : qlico-core_adminer labels : - \"traefik.http.routers.adminer.rule=Host(`adminer.qlico`)\" - \"traefik.http.services.adminer.loadbalancer.server.port=8080\" networks : - qlico-core Example in a full docker-compose file \u00b6 This is a large example, so you know where to place the Adminer service. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" adminer : image : adminer:4.8.1-standalone container_name : qlico-core_adminer labels : - \"traefik.http.routers.adminer.rule=Host(`adminer.qlico`)\" - \"traefik.http.services.adminer.loadbalancer.server.port=8080\" networks : - qlico-core networks : qlico-core : driver : bridge name : qlico-core","title":"Adminer"},{"location":"examples/adminer/#adminer-configuration-example","text":"","title":"Adminer configuration example"},{"location":"examples/adminer/#about-adminer","text":"Adminer (formerly phpMinAdmin) is a full-featured database management tool written in PHP. Conversely to phpMyAdmin, it consist of a single file ready to deploy to the target server. Adminer is available for MySQL, MariaDB, PostgreSQL, SQLite, MS SQL, Oracle, Elasticsearch, MongoDB and others via plugin.","title":"About Adminer"},{"location":"examples/adminer/#more-information-about-adminer","text":"Adminer website Adminer on Docker Hub","title":"More information about Adminer"},{"location":"examples/adminer/#how-to-add-adminer-to-qlico","text":"Add the following YAML to the services section of your docker-compose.yaml file. adminer : image : adminer:4.8.1-standalone container_name : qlico-core_adminer labels : - \"traefik.http.routers.adminer.rule=Host(`adminer.qlico`)\" - \"traefik.http.services.adminer.loadbalancer.server.port=8080\" networks : - qlico-core","title":"How to add Adminer to Qlico?"},{"location":"examples/adminer/#example-in-a-full-docker-compose-file","text":"This is a large example, so you know where to place the Adminer service. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" adminer : image : adminer:4.8.1-standalone container_name : qlico-core_adminer labels : - \"traefik.http.routers.adminer.rule=Host(`adminer.qlico`)\" - \"traefik.http.services.adminer.loadbalancer.server.port=8080\" networks : - qlico-core networks : qlico-core : driver : bridge name : qlico-core","title":"Example in a full docker-compose file"},{"location":"examples/blackfire/","text":"Blackfire configuration example \u00b6 About Blackfire \u00b6 Blackfire.io makes it possible to write performance tests, automate test scenarios, and drill down to the finest details whenever performance issues arise. Teams can collaborate on performance testing in all environments: development, testing, staging and production. More information about Blackfire \u00b6 Blackfire website Blackfire on Docker Hub How to add Blackfire to Qlico? \u00b6 Add the following YAML to the services section of your docker-compose.yaml file. blackfire : image : blackfire/blackfire:2 container_name : qlico-core_blackfire env_file : - .env networks : - qlico-core Example in a full docker-compose file \u00b6 This is a large example, so you know where to place the Blackfire service. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" blackfire : image : blackfire/blackfire:2 container_name : qlico-core_blackfire env_file : - .env networks : - qlico-core networks : qlico-core : driver : bridge name : qlico-core","title":"Blackfire"},{"location":"examples/blackfire/#blackfire-configuration-example","text":"","title":"Blackfire configuration example"},{"location":"examples/blackfire/#about-blackfire","text":"Blackfire.io makes it possible to write performance tests, automate test scenarios, and drill down to the finest details whenever performance issues arise. Teams can collaborate on performance testing in all environments: development, testing, staging and production.","title":"About Blackfire"},{"location":"examples/blackfire/#more-information-about-blackfire","text":"Blackfire website Blackfire on Docker Hub","title":"More information about Blackfire"},{"location":"examples/blackfire/#how-to-add-blackfire-to-qlico","text":"Add the following YAML to the services section of your docker-compose.yaml file. blackfire : image : blackfire/blackfire:2 container_name : qlico-core_blackfire env_file : - .env networks : - qlico-core","title":"How to add Blackfire to Qlico?"},{"location":"examples/blackfire/#example-in-a-full-docker-compose-file","text":"This is a large example, so you know where to place the Blackfire service. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" blackfire : image : blackfire/blackfire:2 container_name : qlico-core_blackfire env_file : - .env networks : - qlico-core networks : qlico-core : driver : bridge name : qlico-core","title":"Example in a full docker-compose file"},{"location":"examples/elasticsearch-kibana/","text":"Elasticsearch and Kibana configuration example \u00b6 About Elasticsearch \u00b6 Elasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data for lightning fast search, fine\u2011tuned relevancy, and powerful analytics that scale with ease. About Kibana \u00b6 Kibana is a free and open user interface that lets you visualize your Elasticsearch data and navigate the Elastic Stack. Do anything from tracking query load to understanding the way requests flow through your apps. More information about Elasticsearch & Kibana \u00b6 Elasticsearch website Kibana website Elastic Docker Images How to add Elasticsearch to Qlico? \u00b6 Add the following YAML to the services section of your docker-compose.yaml file. elasticsearch7 : image : docker.elastic.co/elasticsearch/elasticsearch:7.13.3 container_name : qlico-core_elasticsearch7 logging : driver : none ports : - 9207:9200 volumes : - elasticsearch7-data/:/usr/share/elasticsearch/data environment : - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\" - discovery.type=single-node ulimits : memlock : soft : -1 hard : -1 labels : - \"traefik.http.routers.elasticsearch7.rule=Host(`elasticsearch7.qlico`)\" - \"traefik.http.services.elasticsearch7.loadbalancer.server.port=9200\" networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. elasticsearch7-data : name : qlico-core_elasticsearch7-data driver : local How to add Kibana to Qlico? \u00b6 Add the following YAML to the services section of your docker-compose.yaml file. Make sure you're running Elasticsearch! kibana7 : image : docker.elastic.co/kibana/kibana:7.13.3 container_name : qlico-core_kibana7 logging : driver : none links : - elasticsearch7 environment : ELASTICSEARCH_URL : http://elasticsearch7:9200 ELASTICSEARCH_HOSTS : '[\"http://elasticsearch7:9200\"]' labels : - \"traefik.http.routers.kibana7.rule=Host(`kibana7.qlico`)\" - \"traefik.http.services.kibana7.loadbalancer.server.port=5601\" networks : - qlico-core Example in a full docker-compose file \u00b6 This is a large example, so you know where to place the Elasticsearch & Kibana service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" elasticsearch7 : image : docker.elastic.co/elasticsearch/elasticsearch:7.13.3 container_name : qlico-core_elasticsearch7 logging : driver : none ports : - 9207:9200 volumes : - elasticsearch7-data/:/usr/share/elasticsearch/data environment : - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\" - discovery.type=single-node ulimits : memlock : soft : -1 hard : -1 labels : - \"traefik.http.routers.elasticsearch7.rule=Host(`elasticsearch7.qlico`)\" - \"traefik.http.services.elasticsearch7.loadbalancer.server.port=9200\" networks : - qlico-core kibana7 : image : docker.elastic.co/kibana/kibana:7.13.3 container_name : qlico-core_kibana7 logging : driver : none links : - elasticsearch7 environment : ELASTICSEARCH_URL : http://elasticsearch7:9200 ELASTICSEARCH_HOSTS : '[\"http://elasticsearch7:9200\"]' labels : - \"traefik.http.routers.kibana7.rule=Host(`kibana7.qlico`)\" - \"traefik.http.services.kibana7.loadbalancer.server.port=5601\" networks : - qlico-core volumes : elasticsearch7-data : name : qlico-core_elasticsearch7-data driver : local networks : qlico-core : driver : bridge name : qlico-core","title":"Elasticsearch and Kibana"},{"location":"examples/elasticsearch-kibana/#elasticsearch-and-kibana-configuration-example","text":"","title":"Elasticsearch and Kibana configuration example"},{"location":"examples/elasticsearch-kibana/#about-elasticsearch","text":"Elasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data for lightning fast search, fine\u2011tuned relevancy, and powerful analytics that scale with ease.","title":"About Elasticsearch"},{"location":"examples/elasticsearch-kibana/#about-kibana","text":"Kibana is a free and open user interface that lets you visualize your Elasticsearch data and navigate the Elastic Stack. Do anything from tracking query load to understanding the way requests flow through your apps.","title":"About Kibana"},{"location":"examples/elasticsearch-kibana/#more-information-about-elasticsearch-kibana","text":"Elasticsearch website Kibana website Elastic Docker Images","title":"More information about Elasticsearch &amp; Kibana"},{"location":"examples/elasticsearch-kibana/#how-to-add-elasticsearch-to-qlico","text":"Add the following YAML to the services section of your docker-compose.yaml file. elasticsearch7 : image : docker.elastic.co/elasticsearch/elasticsearch:7.13.3 container_name : qlico-core_elasticsearch7 logging : driver : none ports : - 9207:9200 volumes : - elasticsearch7-data/:/usr/share/elasticsearch/data environment : - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\" - discovery.type=single-node ulimits : memlock : soft : -1 hard : -1 labels : - \"traefik.http.routers.elasticsearch7.rule=Host(`elasticsearch7.qlico`)\" - \"traefik.http.services.elasticsearch7.loadbalancer.server.port=9200\" networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. elasticsearch7-data : name : qlico-core_elasticsearch7-data driver : local","title":"How to add Elasticsearch to Qlico?"},{"location":"examples/elasticsearch-kibana/#how-to-add-kibana-to-qlico","text":"Add the following YAML to the services section of your docker-compose.yaml file. Make sure you're running Elasticsearch! kibana7 : image : docker.elastic.co/kibana/kibana:7.13.3 container_name : qlico-core_kibana7 logging : driver : none links : - elasticsearch7 environment : ELASTICSEARCH_URL : http://elasticsearch7:9200 ELASTICSEARCH_HOSTS : '[\"http://elasticsearch7:9200\"]' labels : - \"traefik.http.routers.kibana7.rule=Host(`kibana7.qlico`)\" - \"traefik.http.services.kibana7.loadbalancer.server.port=5601\" networks : - qlico-core","title":"How to add Kibana to Qlico?"},{"location":"examples/elasticsearch-kibana/#example-in-a-full-docker-compose-file","text":"This is a large example, so you know where to place the Elasticsearch & Kibana service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" elasticsearch7 : image : docker.elastic.co/elasticsearch/elasticsearch:7.13.3 container_name : qlico-core_elasticsearch7 logging : driver : none ports : - 9207:9200 volumes : - elasticsearch7-data/:/usr/share/elasticsearch/data environment : - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\" - discovery.type=single-node ulimits : memlock : soft : -1 hard : -1 labels : - \"traefik.http.routers.elasticsearch7.rule=Host(`elasticsearch7.qlico`)\" - \"traefik.http.services.elasticsearch7.loadbalancer.server.port=9200\" networks : - qlico-core kibana7 : image : docker.elastic.co/kibana/kibana:7.13.3 container_name : qlico-core_kibana7 logging : driver : none links : - elasticsearch7 environment : ELASTICSEARCH_URL : http://elasticsearch7:9200 ELASTICSEARCH_HOSTS : '[\"http://elasticsearch7:9200\"]' labels : - \"traefik.http.routers.kibana7.rule=Host(`kibana7.qlico`)\" - \"traefik.http.services.kibana7.loadbalancer.server.port=5601\" networks : - qlico-core volumes : elasticsearch7-data : name : qlico-core_elasticsearch7-data driver : local networks : qlico-core : driver : bridge name : qlico-core","title":"Example in a full docker-compose file"},{"location":"examples/mailhog/","text":"MailHog configuration example \u00b6 About MailHog \u00b6 MailHog is an email testing tool for developers: Configure your application to use MailHog for SMTP delivery View messages in the web UI, or retrieve them with the JSON API Optionally release messages to real SMTP servers for delivery More information about MailHog \u00b6 MailHog GitHub project MailHog on Docker Hub How to add MailHog to Qlico? \u00b6 Add the following YAML to the services section of your docker-compose.yaml file. mailhog : image : mailhog/mailhog:v1.0.0 container_name : qlico-core_mailhog logging : driver : none labels : - \"traefik.http.routers.mailhog.rule=Host(`mailhog.qlico`)\" - \"traefik.http.services.mailhog.loadbalancer.server.port=8025\" networks : - qlico-core Example in a full docker-compose file \u00b6 This is a large example, so you know where to place the MailHog service. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" mailhog : image : mailhog/mailhog:v1.0.0 container_name : qlico-core_mailhog logging : driver : none labels : - \"traefik.http.routers.mailhog.rule=Host(`mailhog.qlico`)\" - \"traefik.http.services.mailhog.loadbalancer.server.port=8025\" networks : - qlico-core networks : qlico-core : driver : bridge name : qlico-core","title":"MailHog"},{"location":"examples/mailhog/#mailhog-configuration-example","text":"","title":"MailHog configuration example"},{"location":"examples/mailhog/#about-mailhog","text":"MailHog is an email testing tool for developers: Configure your application to use MailHog for SMTP delivery View messages in the web UI, or retrieve them with the JSON API Optionally release messages to real SMTP servers for delivery","title":"About MailHog"},{"location":"examples/mailhog/#more-information-about-mailhog","text":"MailHog GitHub project MailHog on Docker Hub","title":"More information about MailHog"},{"location":"examples/mailhog/#how-to-add-mailhog-to-qlico","text":"Add the following YAML to the services section of your docker-compose.yaml file. mailhog : image : mailhog/mailhog:v1.0.0 container_name : qlico-core_mailhog logging : driver : none labels : - \"traefik.http.routers.mailhog.rule=Host(`mailhog.qlico`)\" - \"traefik.http.services.mailhog.loadbalancer.server.port=8025\" networks : - qlico-core","title":"How to add MailHog to Qlico?"},{"location":"examples/mailhog/#example-in-a-full-docker-compose-file","text":"This is a large example, so you know where to place the MailHog service. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" mailhog : image : mailhog/mailhog:v1.0.0 container_name : qlico-core_mailhog logging : driver : none labels : - \"traefik.http.routers.mailhog.rule=Host(`mailhog.qlico`)\" - \"traefik.http.services.mailhog.loadbalancer.server.port=8025\" networks : - qlico-core networks : qlico-core : driver : bridge name : qlico-core","title":"Example in a full docker-compose file"},{"location":"examples/minio/","text":"MinIO configuration example \u00b6 About MinIO \u00b6 MinIO is a high performance, distributed object storage system. It is software-defined, runs on industry standard hardware and is 100% open source with the dominant license being GNU AGPL v3. More information about MinIO \u00b6 MinIO website MinIO on Docker Hub How to add MinIO to Qlico? \u00b6 Add the following YAML to the services section of your docker-compose.yaml file. minio : image : minio/minio:RELEASE.2021-06-17T00-10-46Z container_name : qlico-core_minio command : server /export environment : MINIO_ACCESS_KEY : ${MINIO_ACCESS_KEY:-qlicorocks} MINIO_SECRET_KEY : ${MINIO_SECRET_KEY:-qlicorocks} volumes : - minio-data:/export networks : - qlico-core labels : - \"traefik.http.routers.minio.rule=Host(`minio.qlico`)\" - \"traefik.http.services.minio.loadbalancer.server.port=9000\" Add the following YAML to the volumes section of your docker-compose.yaml file. minio-data : name : qlico-core_minio-data driver : local Example in a full docker-compose file \u00b6 This is a large example, so you know where to place the MinIO service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" minio : image : minio/minio:RELEASE.2021-06-17T00-10-46Z container_name : qlico-core_minio command : server /export environment : MINIO_ACCESS_KEY : ${MINIO_ACCESS_KEY:-qlicorocks} MINIO_SECRET_KEY : ${MINIO_SECRET_KEY:-qlicorocks} volumes : - minio-data:/export networks : - qlico-core labels : - \"traefik.http.routers.minio.rule=Host(`minio.qlico`)\" - \"traefik.http.services.minio.loadbalancer.server.port=9000\" volumes : minio-data : name : qlico-core_minio-data driver : local networks : qlico-core : driver : bridge name : qlico-core","title":"Minio"},{"location":"examples/minio/#minio-configuration-example","text":"","title":"MinIO configuration example"},{"location":"examples/minio/#about-minio","text":"MinIO is a high performance, distributed object storage system. It is software-defined, runs on industry standard hardware and is 100% open source with the dominant license being GNU AGPL v3.","title":"About MinIO"},{"location":"examples/minio/#more-information-about-minio","text":"MinIO website MinIO on Docker Hub","title":"More information about MinIO"},{"location":"examples/minio/#how-to-add-minio-to-qlico","text":"Add the following YAML to the services section of your docker-compose.yaml file. minio : image : minio/minio:RELEASE.2021-06-17T00-10-46Z container_name : qlico-core_minio command : server /export environment : MINIO_ACCESS_KEY : ${MINIO_ACCESS_KEY:-qlicorocks} MINIO_SECRET_KEY : ${MINIO_SECRET_KEY:-qlicorocks} volumes : - minio-data:/export networks : - qlico-core labels : - \"traefik.http.routers.minio.rule=Host(`minio.qlico`)\" - \"traefik.http.services.minio.loadbalancer.server.port=9000\" Add the following YAML to the volumes section of your docker-compose.yaml file. minio-data : name : qlico-core_minio-data driver : local","title":"How to add MinIO to Qlico?"},{"location":"examples/minio/#example-in-a-full-docker-compose-file","text":"This is a large example, so you know where to place the MinIO service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" minio : image : minio/minio:RELEASE.2021-06-17T00-10-46Z container_name : qlico-core_minio command : server /export environment : MINIO_ACCESS_KEY : ${MINIO_ACCESS_KEY:-qlicorocks} MINIO_SECRET_KEY : ${MINIO_SECRET_KEY:-qlicorocks} volumes : - minio-data:/export networks : - qlico-core labels : - \"traefik.http.routers.minio.rule=Host(`minio.qlico`)\" - \"traefik.http.services.minio.loadbalancer.server.port=9000\" volumes : minio-data : name : qlico-core_minio-data driver : local networks : qlico-core : driver : bridge name : qlico-core","title":"Example in a full docker-compose file"},{"location":"examples/mysql/","text":"MySQL configuration example \u00b6 About MySQL \u00b6 MySQL is the world's most popular open source database. Whether you are a fast growing web property, technology ISV or large enterprise, MySQL can cost-effectively help you deliver high performance, scalable database applications. More information about MySQL \u00b6 MySQL website MySQL on Docker Hub How to add MySQL 5 to Qlico? \u00b6 Add the following YAML to the services section of your docker-compose.yaml file. mysql5 : image : mysql:5.7.34 container_name : qlico-core_mysql5 logging : driver : none ports : - 3305:3306 environment : MYSQL_USER : ${MYSQL_USERNAME:-root} MYSQL_ROOT_PASSWORD : ${MYSQL_ROOT_PASSWORD:-qlico} volumes : - mysql-data5:/var/lib/mysql networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. mysql-data5 : name : qlico-core_mysql5-data driver : local Example in a full docker-compose file \u00b6 This is a large example, so you know where to place the MySQL service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" mysql5 : image : mysql:5.7.34 container_name : qlico-core_mysql5 logging : driver : none ports : - 3305:3306 environment : MYSQL_USER : ${MYSQL_USERNAME:-root} MYSQL_ROOT_PASSWORD : ${MYSQL_ROOT_PASSWORD:-qlico} volumes : - mysql-data5:/var/lib/mysql networks : - qlico-core driver : local volumes : mysql-data5 : name : qlico-core_mysql5-data networks : qlico-core : driver : bridge name : qlico-core","title":"MySQL"},{"location":"examples/mysql/#mysql-configuration-example","text":"","title":"MySQL configuration example"},{"location":"examples/mysql/#about-mysql","text":"MySQL is the world's most popular open source database. Whether you are a fast growing web property, technology ISV or large enterprise, MySQL can cost-effectively help you deliver high performance, scalable database applications.","title":"About MySQL"},{"location":"examples/mysql/#more-information-about-mysql","text":"MySQL website MySQL on Docker Hub","title":"More information about MySQL"},{"location":"examples/mysql/#how-to-add-mysql-5-to-qlico","text":"Add the following YAML to the services section of your docker-compose.yaml file. mysql5 : image : mysql:5.7.34 container_name : qlico-core_mysql5 logging : driver : none ports : - 3305:3306 environment : MYSQL_USER : ${MYSQL_USERNAME:-root} MYSQL_ROOT_PASSWORD : ${MYSQL_ROOT_PASSWORD:-qlico} volumes : - mysql-data5:/var/lib/mysql networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. mysql-data5 : name : qlico-core_mysql5-data driver : local","title":"How to add MySQL 5 to Qlico?"},{"location":"examples/mysql/#example-in-a-full-docker-compose-file","text":"This is a large example, so you know where to place the MySQL service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" mysql5 : image : mysql:5.7.34 container_name : qlico-core_mysql5 logging : driver : none ports : - 3305:3306 environment : MYSQL_USER : ${MYSQL_USERNAME:-root} MYSQL_ROOT_PASSWORD : ${MYSQL_ROOT_PASSWORD:-qlico} volumes : - mysql-data5:/var/lib/mysql networks : - qlico-core driver : local volumes : mysql-data5 : name : qlico-core_mysql5-data networks : qlico-core : driver : bridge name : qlico-core","title":"Example in a full docker-compose file"},{"location":"examples/percona/","text":"Percona configuration examples \u00b6 About Percona \u00b6 More enterprises rely on MySQL\u00ae performance, resilience and security to power the applications and websites that make achieving their business goals possible. Percona Server for MySQL\u00ae is a free, fully compatible, enhanced and open source drop-in replacement for any MySQL database. It provides superior performance, scalability and instrumentation. More information about Percona \u00b6 Percona server website Percona server on Docker Hub How to add Percona to Qlico? \u00b6 Is it possible to use Percona 5 or 8, it's even possible to run both at the same time. How to add Percona 5 to Qlico? \u00b6 Add the following YAML to the services section of your docker-compose.yaml file. percona5 : image : percona:5.7.34-centos container_name : qlico-core_percona5 logging : driver : none ports : - 3305:3306 environment : MYSQL_USER : ${MYSQL_USERNAME:-root} MYSQL_ROOT_PASSWORD : ${MYSQL_ROOT_PASSWORD:-qlico} volumes : - percona5-data:/var/lib/mysql networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. percona5-data : name : qlico-core_percona5-data driver : local How to add Percona 8 to Qlico? \u00b6 Add the following YAML to the services section of your docker-compose.yaml file. percona8 : image : percona:8.0.23-14-centos container_name : qlico-core_percona8 logging : driver : none ports : - 3308:3306 environment : MYSQL_USER : ${MYSQL_USERNAME:-root} MYSQL_ROOT_PASSWORD : ${MYSQL_ROOT_PASSWORD:-qlico} volumes : - percona8-data:/var/lib/mysql networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. percona8-data : name : qlico-core_percona8-data driver : local Example in a full docker-compose file \u00b6 This is a large example, so you know where to place the Percona service(s) and volume(s). --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" percona5 : image : percona:5.7.34-centos container_name : qlico-core_percona5 logging : driver : none ports : - 3305:3306 environment : MYSQL_USER : ${MYSQL_USERNAME:-root} MYSQL_ROOT_PASSWORD : ${MYSQL_ROOT_PASSWORD:-qlico} volumes : - percona5-data:/var/lib/mysql networks : - qlico-core percona8 : image : percona:8.0.23-14-centos container_name : qlico-core_percona8 logging : driver : none ports : - 3308:3306 environment : MYSQL_USER : ${MYSQL_USERNAME:-root} MYSQL_ROOT_PASSWORD : ${MYSQL_ROOT_PASSWORD:-qlico} volumes : - percona8-data:/var/lib/mysql networks : - qlico-core volumes : percona5-data : name : qlico-core_percona5-data driver : local percona8-data : name : qlico-core_percona8-data driver : local networks : qlico-core : driver : bridge name : qlico-core","title":"Percona"},{"location":"examples/percona/#percona-configuration-examples","text":"","title":"Percona configuration examples"},{"location":"examples/percona/#about-percona","text":"More enterprises rely on MySQL\u00ae performance, resilience and security to power the applications and websites that make achieving their business goals possible. Percona Server for MySQL\u00ae is a free, fully compatible, enhanced and open source drop-in replacement for any MySQL database. It provides superior performance, scalability and instrumentation.","title":"About Percona"},{"location":"examples/percona/#more-information-about-percona","text":"Percona server website Percona server on Docker Hub","title":"More information about Percona"},{"location":"examples/percona/#how-to-add-percona-to-qlico","text":"Is it possible to use Percona 5 or 8, it's even possible to run both at the same time.","title":"How to add Percona to Qlico?"},{"location":"examples/percona/#how-to-add-percona-5-to-qlico","text":"Add the following YAML to the services section of your docker-compose.yaml file. percona5 : image : percona:5.7.34-centos container_name : qlico-core_percona5 logging : driver : none ports : - 3305:3306 environment : MYSQL_USER : ${MYSQL_USERNAME:-root} MYSQL_ROOT_PASSWORD : ${MYSQL_ROOT_PASSWORD:-qlico} volumes : - percona5-data:/var/lib/mysql networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. percona5-data : name : qlico-core_percona5-data driver : local","title":"How to add Percona 5 to Qlico?"},{"location":"examples/percona/#how-to-add-percona-8-to-qlico","text":"Add the following YAML to the services section of your docker-compose.yaml file. percona8 : image : percona:8.0.23-14-centos container_name : qlico-core_percona8 logging : driver : none ports : - 3308:3306 environment : MYSQL_USER : ${MYSQL_USERNAME:-root} MYSQL_ROOT_PASSWORD : ${MYSQL_ROOT_PASSWORD:-qlico} volumes : - percona8-data:/var/lib/mysql networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. percona8-data : name : qlico-core_percona8-data driver : local","title":"How to add Percona 8 to Qlico?"},{"location":"examples/percona/#example-in-a-full-docker-compose-file","text":"This is a large example, so you know where to place the Percona service(s) and volume(s). --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" percona5 : image : percona:5.7.34-centos container_name : qlico-core_percona5 logging : driver : none ports : - 3305:3306 environment : MYSQL_USER : ${MYSQL_USERNAME:-root} MYSQL_ROOT_PASSWORD : ${MYSQL_ROOT_PASSWORD:-qlico} volumes : - percona5-data:/var/lib/mysql networks : - qlico-core percona8 : image : percona:8.0.23-14-centos container_name : qlico-core_percona8 logging : driver : none ports : - 3308:3306 environment : MYSQL_USER : ${MYSQL_USERNAME:-root} MYSQL_ROOT_PASSWORD : ${MYSQL_ROOT_PASSWORD:-qlico} volumes : - percona8-data:/var/lib/mysql networks : - qlico-core volumes : percona5-data : name : qlico-core_percona5-data driver : local percona8-data : name : qlico-core_percona8-data driver : local networks : qlico-core : driver : bridge name : qlico-core","title":"Example in a full docker-compose file"},{"location":"examples/pgadmin/","text":"pgAdmin Example \u00b6 About pgAdmin \u00b6 pgAdmin is the most popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world. More information about pgAdmin \u00b6 pgAdmin website pgAdmin on Docker Hub How to add pgAdmin to Qlico? \u00b6 Add the following YAML to the services section of your docker-compose.yaml file. pgadmin4 : container_name : qlico-core_pgadmin image : dpage/pgadmin4 environment : PGADMIN_DEFAULT_EMAIL : ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.qlico} PGADMIN_DEFAULT_PASSWORD : ${PGADMIN_DEFAULT_PASSWORD:-qlico} volumes : - pgadmin4-data:/root/.pgadmin labels : - \"traefik.http.routers.pgadmin4.rule=Host(`pgadmin4.qlico`)\" - \"traefik.http.services.pgadmin4.loadbalancer.server.port=80\" networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. pgadmin4-data : name : qlico-core_pgadmin4-data This is a large example, so you know where to place the pgAdmin service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" pgadmin4 : container_name : qlico-core_pgadmin image : dpage/pgadmin4 environment : PGADMIN_DEFAULT_EMAIL : ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.qlico} PGADMIN_DEFAULT_PASSWORD : ${PGADMIN_DEFAULT_PASSWORD:-qlico} volumes : - pgadmin4-data:/root/.pgadmin labels : - \"traefik.http.routers.pgadmin4.rule=Host(`pgadmin4.qlico`)\" - \"traefik.http.services.pgadmin4.loadbalancer.server.port=80\" networks : - qlico-core volumes : pgadmin4-data : name : qlico-core_pgadmin4-data networks : qlico-core : driver : bridge name : qlico-core","title":"pgAdmin"},{"location":"examples/pgadmin/#pgadmin-example","text":"","title":"pgAdmin Example"},{"location":"examples/pgadmin/#about-pgadmin","text":"pgAdmin is the most popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world.","title":"About pgAdmin"},{"location":"examples/pgadmin/#more-information-about-pgadmin","text":"pgAdmin website pgAdmin on Docker Hub","title":"More information about pgAdmin"},{"location":"examples/pgadmin/#how-to-add-pgadmin-to-qlico","text":"Add the following YAML to the services section of your docker-compose.yaml file. pgadmin4 : container_name : qlico-core_pgadmin image : dpage/pgadmin4 environment : PGADMIN_DEFAULT_EMAIL : ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.qlico} PGADMIN_DEFAULT_PASSWORD : ${PGADMIN_DEFAULT_PASSWORD:-qlico} volumes : - pgadmin4-data:/root/.pgadmin labels : - \"traefik.http.routers.pgadmin4.rule=Host(`pgadmin4.qlico`)\" - \"traefik.http.services.pgadmin4.loadbalancer.server.port=80\" networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. pgadmin4-data : name : qlico-core_pgadmin4-data This is a large example, so you know where to place the pgAdmin service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" pgadmin4 : container_name : qlico-core_pgadmin image : dpage/pgadmin4 environment : PGADMIN_DEFAULT_EMAIL : ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.qlico} PGADMIN_DEFAULT_PASSWORD : ${PGADMIN_DEFAULT_PASSWORD:-qlico} volumes : - pgadmin4-data:/root/.pgadmin labels : - \"traefik.http.routers.pgadmin4.rule=Host(`pgadmin4.qlico`)\" - \"traefik.http.services.pgadmin4.loadbalancer.server.port=80\" networks : - qlico-core volumes : pgadmin4-data : name : qlico-core_pgadmin4-data networks : qlico-core : driver : bridge name : qlico-core","title":"How to add pgAdmin to Qlico?"},{"location":"examples/postgresql/","text":"PostgreSQL configuration Example \u00b6 About PostgreSQL \u00b6 PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. More information about PostgreSQL \u00b6 PostgreSQL website PostgreSQL on Docker Hub How to add PostgreSQL to Qlico? \u00b6 Add the following YAML to the services section of your docker-compose.yaml file. postgres13 : image : postgres:13-alpine container_name : qlico-core_postgres13 logging : driver : none ports : - 5432:5432 environment : POSTGRES_USER : ${POSTGRES_USER:-postgres} POSTGRES_PASSWORD : ${POSTGRES_PASSWORD:-qlico} volumes : - postgres13-data:/var/lib/postgresql networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. postgres13-data : name : qlico-core_postgres13-data Example in a full docker-compose file \u00b6 This is a large example, so you know where to place the PostgreSQL service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" postgres13 : image : postgres:13-alpine container_name : qlico-core_postgres13 logging : driver : none ports : - 5432:5432 environment : POSTGRES_USER : ${POSTGRES_USER:-postgres} POSTGRES_PASSWORD : ${POSTGRES_PASSWORD:-qlico} volumes : - postgres13-data:/var/lib/postgresql networks : - qlico-core volumes : postgres13-data : name : qlico-core_postgres13-data networks : qlico-core : driver : bridge name : qlico-core","title":"PostgreSQL"},{"location":"examples/postgresql/#postgresql-configuration-example","text":"","title":"PostgreSQL configuration Example"},{"location":"examples/postgresql/#about-postgresql","text":"PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.","title":"About PostgreSQL"},{"location":"examples/postgresql/#more-information-about-postgresql","text":"PostgreSQL website PostgreSQL on Docker Hub","title":"More information about PostgreSQL"},{"location":"examples/postgresql/#how-to-add-postgresql-to-qlico","text":"Add the following YAML to the services section of your docker-compose.yaml file. postgres13 : image : postgres:13-alpine container_name : qlico-core_postgres13 logging : driver : none ports : - 5432:5432 environment : POSTGRES_USER : ${POSTGRES_USER:-postgres} POSTGRES_PASSWORD : ${POSTGRES_PASSWORD:-qlico} volumes : - postgres13-data:/var/lib/postgresql networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. postgres13-data : name : qlico-core_postgres13-data","title":"How to add PostgreSQL to Qlico?"},{"location":"examples/postgresql/#example-in-a-full-docker-compose-file","text":"This is a large example, so you know where to place the PostgreSQL service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" postgres13 : image : postgres:13-alpine container_name : qlico-core_postgres13 logging : driver : none ports : - 5432:5432 environment : POSTGRES_USER : ${POSTGRES_USER:-postgres} POSTGRES_PASSWORD : ${POSTGRES_PASSWORD:-qlico} volumes : - postgres13-data:/var/lib/postgresql networks : - qlico-core volumes : postgres13-data : name : qlico-core_postgres13-data networks : qlico-core : driver : bridge name : qlico-core","title":"Example in a full docker-compose file"},{"location":"examples/rabbitmq/","text":"RabbitMQ configuration example \u00b6 About RabbitMQ \u00b6 RabbitMQ is the most widely deployed open source message broker. RabbitMQ is lightweight and easy to deploy on premises and in the cloud. It supports multiple messaging protocols. RabbitMQ can be deployed in distributed and federated configurations to meet high-scale, high-availability requirements. More information about RabbitMQ \u00b6 RabbitMQ website RabbitMQ on Docker Hub How to add RabbitMQ to Qlico? \u00b6 Add the following YAML to the services section of your docker-compose.yaml file. rabbitmq3 : image : rabbitmq:3.8-management-alpine container_name : qlico-core_rabbitmq3 ports : - 5672:5672 - 15672:15672 volumes : - rabbitmq3-data:/data/mnesia labels : - \"traefik.http.routers.rabbitmq3.rule=Host(`rabbitmq3.qlico`)\" - \"traefik.http.services.rabbitmq3.loadbalancer.server.port=15672\" networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. rabbitmq3-data : name : qlico-core_rabbitmq3-data Example in a full docker-compose file \u00b6 This is a large example, so you know where to place the RabbitMQ service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" rabbitmq3 : image : rabbitmq:3.8-management-alpine container_name : qlico-core_rabbitmq3 ports : - 5672:5672 - 15672:15672 volumes : - rabbitmq3-data:/data/mnesia labels : - \"traefik.http.routers.rabbitmq3.rule=Host(`rabbitmq3.qlico`)\" - \"traefik.http.services.rabbitmq3.loadbalancer.server.port=15672\" networks : - qlico-core volumes : rabbitmq3-data : name : qlico-core_rabbitmq3-data networks : qlico-core : driver : bridge name : qlico-core","title":"RabbitMQ"},{"location":"examples/rabbitmq/#rabbitmq-configuration-example","text":"","title":"RabbitMQ configuration example"},{"location":"examples/rabbitmq/#about-rabbitmq","text":"RabbitMQ is the most widely deployed open source message broker. RabbitMQ is lightweight and easy to deploy on premises and in the cloud. It supports multiple messaging protocols. RabbitMQ can be deployed in distributed and federated configurations to meet high-scale, high-availability requirements.","title":"About RabbitMQ"},{"location":"examples/rabbitmq/#more-information-about-rabbitmq","text":"RabbitMQ website RabbitMQ on Docker Hub","title":"More information about RabbitMQ"},{"location":"examples/rabbitmq/#how-to-add-rabbitmq-to-qlico","text":"Add the following YAML to the services section of your docker-compose.yaml file. rabbitmq3 : image : rabbitmq:3.8-management-alpine container_name : qlico-core_rabbitmq3 ports : - 5672:5672 - 15672:15672 volumes : - rabbitmq3-data:/data/mnesia labels : - \"traefik.http.routers.rabbitmq3.rule=Host(`rabbitmq3.qlico`)\" - \"traefik.http.services.rabbitmq3.loadbalancer.server.port=15672\" networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. rabbitmq3-data : name : qlico-core_rabbitmq3-data","title":"How to add RabbitMQ to Qlico?"},{"location":"examples/rabbitmq/#example-in-a-full-docker-compose-file","text":"This is a large example, so you know where to place the RabbitMQ service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" rabbitmq3 : image : rabbitmq:3.8-management-alpine container_name : qlico-core_rabbitmq3 ports : - 5672:5672 - 15672:15672 volumes : - rabbitmq3-data:/data/mnesia labels : - \"traefik.http.routers.rabbitmq3.rule=Host(`rabbitmq3.qlico`)\" - \"traefik.http.services.rabbitmq3.loadbalancer.server.port=15672\" networks : - qlico-core volumes : rabbitmq3-data : name : qlico-core_rabbitmq3-data networks : qlico-core : driver : bridge name : qlico-core","title":"Example in a full docker-compose file"},{"location":"examples/redis/","text":"Redis Configuration example \u00b6 About Redis \u00b6 Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions, and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster. The name Redis means REmote DIctionary Server. More information about Redis \u00b6 Redis website Redis on Docker Hub How to add Redis to Qlico? \u00b6 Add the following YAML to the services section of your docker-compose.yaml file. redis6 : image : redis:6.2.4-alpine3.14 container_name : qlico-core_redis6 ports : - 6379:6379 volumes : - redis6-data:/data networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. redis6-data : name : qlico-core_redis6-data Example in a full docker-compose file \u00b6 This is a large example, so you know where to place the Redis service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" redis6 : image : redis:6.2.4-alpine3.14 container_name : qlico-core_redis6 ports : - 6379:6379 volumes : - redis6-data:/data networks : - qlico-core volumes : redis6-data : name : qlico-core_redis6-data networks : qlico-core : driver : bridge name : qlico-core","title":"Redis"},{"location":"examples/redis/#redis-configuration-example","text":"","title":"Redis Configuration example"},{"location":"examples/redis/#about-redis","text":"Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions, and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster. The name Redis means REmote DIctionary Server.","title":"About Redis"},{"location":"examples/redis/#more-information-about-redis","text":"Redis website Redis on Docker Hub","title":"More information about Redis"},{"location":"examples/redis/#how-to-add-redis-to-qlico","text":"Add the following YAML to the services section of your docker-compose.yaml file. redis6 : image : redis:6.2.4-alpine3.14 container_name : qlico-core_redis6 ports : - 6379:6379 volumes : - redis6-data:/data networks : - qlico-core Add the following YAML to the volumes section of your docker-compose.yaml file. redis6-data : name : qlico-core_redis6-data","title":"How to add Redis to Qlico?"},{"location":"examples/redis/#example-in-a-full-docker-compose-file","text":"This is a large example, so you know where to place the Redis service and volume. --- # Author: Qlico <hello@qlico.dev> version : \"3.9\" services : traefik : image : traefik:v2.4.9 container_name : qlico-core_traefik command : [ '--providers.docker' , '--api.insecure' ] networks : - qlico-core ports : - 80:80 volumes : - /var/run/docker.sock:/var/run/docker.sock labels : - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\" - \"traefik.http.services.traefik.loadbalancer.server.port=8080\" redis6 : image : redis:6.2.4-alpine3.14 container_name : qlico-core_redis6 ports : - 6379:6379 volumes : - redis6-data:/data networks : - qlico-core volumes : redis6-data : name : qlico-core_redis6-data networks : qlico-core : driver : bridge name : qlico-core","title":"Example in a full docker-compose file"}]}